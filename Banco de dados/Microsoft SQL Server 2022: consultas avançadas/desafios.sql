SELECT COUNT(*) FROM TABELA_DE_CLIENTES;

SELECT COUNT(*) FROM TABELA_DE_PRODUTOS;

SELECT COUNT(*) FROM TABELA_DE_VENDEDORES;

SELECT COUNT(*) FROM NOTAS_FISCAIS;

SELECT COUNT(*) FROM ITENS_NOTAS_FISCAIS;

SELECT * FROM TABELA_DE_CLIENTES tdc;

SELECT * FROM TABELA_DE_PRODUTOS WHERE 
SABOR in ('Manga', 'Laranja', 'Melancia');

SELECT * FROM TABELA_DE_CLIENTES WHERE 
CIDADE in ('Rio de Janeiro', 'Sao Paulo') AND (IDADE BETWEEN 20 AND 25);

SELECT * FROM TABELA_DE_PRODUTOS WHERE SABOR LIKE '%Maca%' AND EMBALAGEM = 'PET';

--Buscando clientes
SELECT * FROM TABELA_DE_CLIENTES WHERE NOME LIKE '%Silva';


SELECT DISTINCT EMBALAGEM FROM TABELA_DE_PRODUTOS;

--Desafio: categorias dos produtos
SELECT COUNT(DISTINCT SABOR) FROM TABELA_DE_PRODUTOS;

--Desafio: primeiras vendas de um determinado dia
SELECT TOP 10 * FROM NOTAS_FISCAIS WHERE DATA_VENDA = '2017-10-01';

--Desafio: obter a maior venda de um produto
SELECT TOP 1 * FROM ITENS_NOTAS_FISCAIS 
WHERE CODIGO_DO_PRODUTO = (SELECT CODIGO_DO_PRODUTO FROM TABELA_DE_PRODUTOS tdp WHERE tdP.NOME_DO_PRODUTO = 'Linha Refrescante - 1 Litro - Morango/Limao') 
ORDER BY QUANTIDADE DESC;

--Desafio: quantidade de vendas
SELECT CODIGO_DO_PRODUTO, COUNT(*) as NUMERO FROM ITENS_NOTAS_FISCAIS 
WHERE CODIGO_DO_PRODUTO = '1101035' AND QUANTIDADE = 99
GROUP BY CODIGO_DO_PRODUTO;


SELECT ESTADO, SUM(LIMITE_DE_CREDITO) AS CREDITO 
FROM TABELA_DE_CLIENTES GROUP BY ESTADO 
HAVING SUM(LIMITE_DE_CREDITO) >= 900000;

--Desafio: produtos mais vendidos
SELECT CODIGO_DO_PRODUTO, SUM(QUANTIDADE) as QUANTIDADE_VENDAS_TOTAL FROM ITENS_NOTAS_FISCAIS inf
GROUP BY CODIGO_DO_PRODUTO ORDER BY QUANTIDADE_VENDAS_TOTAL DESC; 

--Desafio: filtrando os produtos mais vendidos
SELECT CODIGO_DO_PRODUTO, SUM(QUANTIDADE) as QUANTIDADE_VENDAS_TOTAL FROM ITENS_NOTAS_FISCAIS
GROUP BY CODIGO_DO_PRODUTO HAVING SUM(QUANTIDADE) > 394000 ORDER BY SUM(QUANTIDADE) DESC;

--Desafio: classificando os clientes
SELECT NOME,  
(CASE WHEN LIMITE_DE_CREDITO >= 150000 THEN 'Clientes Grandes'
	  WHEN LIMITE_DE_CREDITO >= 110000 AND LIMITE_DE_CREDITO < 150000 THEN 'Clientes Médios'
	  ELSE 'Clientes Pequenos' END) AS CLASSIFICACAO 
FROM TABELA_DE_CLIENTES;

--Desafio: nome dos produtos
SELECT inf.CODIGO_DO_PRODUTO, tdp.NOME_DO_PRODUTO, SUM(inf.QUANTIDADE) AS QUANTIDADE_VENDAS_TOTAL FROM ITENS_NOTAS_FISCAIS inf 
INNER JOIN TABELA_DE_PRODUTOS tdp 
ON inf.CODIGO_DO_PRODUTO = tdp.CODIGO_DO_PRODUTO  
GROUP BY inf.CODIGO_DO_PRODUTO, tdp.NOME_DO_PRODUTO HAVING SUM(inf.QUANTIDADE) > 394000 
ORDER BY SUM(inf.QUANTIDADE) DESC;

--Desafio: buscando os sabores dos produtos mais vendidos
SELECT DISTINCT SABOR  from TABELA_DE_PRODUTOS tdp2 WHERE tdp2.CODIGO_DO_PRODUTO in 
(SELECT inf.CODIGO_DO_PRODUTO AS QUANTIDADE_VENDAS_TOTAL FROM ITENS_NOTAS_FISCAIS inf 
INNER JOIN TABELA_DE_PRODUTOS tdp 
ON inf.CODIGO_DO_PRODUTO = tdp.CODIGO_DO_PRODUTO  
GROUP BY inf.CODIGO_DO_PRODUTO, tdp.NOME_DO_PRODUTO HAVING SUM(inf.QUANTIDADE) > 394000);

--Desafio: transformando HAVING em Subconsultas
SELECT QUANTIDADES_TOTAIS.CODIGO_DO_PRODUTO, QUANTIDADES_TOTAIS.QUANTIDADE_TOTAL FROM (
SELECT inf.CODIGO_DO_PRODUTO, SUM(inf.QUANTIDADE) AS QUANTIDADE_TOTAL FROM ITENS_NOTAS_FISCAIS inf
GROUP BY inf.CODIGO_DO_PRODUTO) AS QUANTIDADES_TOTAIS
WHERE QUANTIDADES_TOTAIS.QUANTIDADE_TOTAL > 394000 ORDER BY QUANTIDADES_TOTAIS.QUANTIDADE_TOTAL DESC;

--Desafio: usando visão para substituir o HAVING // 268001
CREATE VIEW	VW_QUANTIDADE_TOTAL_PRODUTOS AS
SELECT INF.CODIGO_DO_PRODUTO, TP.NOME_DO_PRODUTO, SUM(INF.QUANTIDADE) AS QUANTIDADE FROM ITENS_NOTAS_FISCAIS  INF
INNER JOIN TABELA_DE_PRODUTOS TP 
ON INF.CODIGO_DO_PRODUTO = TP.CODIGO_DO_PRODUTO
GROUP BY INF.CODIGO_DO_PRODUTO, TP.NOME_DO_PRODUTO;

SELECT * FROM VW_QUANTIDADE_TOTAL_PRODUTOS
WHERE QUANTIDADE > 268001 
ORDER BY QUANTIDADE DESC;

--Desafio: separando nome e sobrenome
SELECT CHARINDEX(' ', tdc.NOME) FROM TABELA_DE_CLIENTES tdc; -- CHARINDEX(' ', tdc.NOME) RETORNA A POSICAO DO " "
SELECT LEFT(tdc.NOME, CHARINDEX(' ', tdc.NOME)) FROM TABELA_DE_CLIENTES tdc;

--Desafio: data por extenso
SELECT NOME, DATENAME(dd, DATA_DE_NASCIMENTO) AS DIA_NASCIMENTO, 
			 DATENAME(dw, DATA_DE_NASCIMENTO) AS DIA_SEMANA_NASCIMENTO, 
			 DATENAME(mm, DATA_DE_NASCIMENTO) AS MES_NASCIMENTO, 
			 DATENAME(yyyy,  DATA_DE_NASCIMENTO) AS ANO_NASCIMENTO 
FROM TABELA_DE_CLIENTES; 

--Desafio: formato do faturamento
SELECT FLOOR(SUM(IMPOSTO * (QUANTIDADE * PRECO))) AS QUANTIDADE
FROM NOTAS_FISCAIS nf 
INNER JOIN ITENS_NOTAS_FISCAIS inf ON nf.NUMERO = inf.NUMERO
WHERE YEAR(DATA_VENDA) = 2016
GROUP BY YEAR(DATA_VENDA);

--Desafio: listando expressão natural
SELECT 'O cliente ' + tdc.NOME + ' comprou' + STR(SUM(inf.QUANTIDADE * inf.PRECO), 10, 2) + ' no ano de 2016.' FROM TABELA_DE_CLIENTES tdc
INNER JOIN NOTAS_FISCAIS nf ON tdc.CPF = nf.CPF
INNER JOIN ITENS_NOTAS_FISCAIS inf ON nf.NUMERO = inf.NUMERO
WHERE YEAR(NF.DATA_VENDA) = '2016'
GROUP BY tdc.NOME, nf.DATA_VENDA;

SELECT SUM(QUANTIDADE * PRECO) from ITENS_NOTAS_FISCAIS;

--Desafio: complementando o relatório
SELECT 
TC.CPF, TC.NOME, TC.VOLUME_DE_COMPRA, TV.MES_ANO, TV.QUANTIDADE_TOTAL, 
(CASE WHEN TC.VOLUME_DE_COMPRA < TV.QUANTIDADE_TOTAL THEN 'VENDAS INVÁLIDAS' 
ELSE 'VENDAS VÁLIDAS' END) AS RESULTADO,
ROUND((1 - (TC.VOLUME_DE_COMPRA/TV.QUANTIDADE_TOTAL)) * 100, 2) AS DIFERENCA
FROM TABELA_DE_CLIENTES TC 
INNER JOIN (
    SELECT NF.CPF, 
    CONVERT(VARCHAR(7), NF.DATA_VENDA, 120) AS MES_ANO, 
    SUM(INF.QUANTIDADE) AS QUANTIDADE_TOTAL
    FROM NOTAS_FISCAIS NF 
    INNER JOIN ITENS_NOTAS_FISCAIS INF 
    ON NF.NUMERO = INF.NUMERO 
    GROUP BY NF.CPF, CONVERT(VARCHAR(7), NF.DATA_VENDA, 120)
) TV
ON TV.CPF = TC.CPF
WHERE TV.MES_ANO = '2015-01' AND (TC.VOLUME_DE_COMPRA - TV.QUANTIDADE_TOTAL) < 0;


--Desafio: vendas percentuais por tamanho
SELECT VS.TAMANHO, VS.ANO, VS.VENDA_ANO, 
    ROUND((CONVERT(FLOAT, VS.VENDA_ANO) / CONVERT(FLOAT, VA.VENDA_TOTAL_ANO)) * 100, 2) AS PERCENTUAL 
FROM (
	SELECT TP.TAMANHO, 
    YEAR(NF.DATA_VENDA) AS ANO, 
    SUM(INF.QUANTIDADE) AS VENDA_ANO 
    FROM TABELA_DE_PRODUTOS TP 
    INNER JOIN ITENS_NOTAS_FISCAIS INF 
    ON TP.CODIGO_DO_PRODUTO = INF.CODIGO_DO_PRODUTO 
    INNER JOIN NOTAS_FISCAIS NF 
    ON INF.NUMERO = NF.NUMERO 
    WHERE YEAR(NF.DATA_VENDA) = 2015 
    GROUP BY TP.TAMANHO , YEAR(NF.DATA_VENDA) 
) VS 
INNER JOIN (
    SELECT YEAR(NF.DATA_VENDA) AS ANO, 
    SUM(INF.QUANTIDADE) AS VENDA_TOTAL_ANO 
    FROM NOTAS_FISCAIS NF 
    INNER JOIN ITENS_NOTAS_FISCAIS INF 
    ON NF.NUMERO = INF.NUMERO 
    WHERE YEAR(NF.DATA_VENDA) = 2015 
    GROUP BY YEAR(NF.DATA_VENDA)
) VA 
ON VS.ANO = VA.ANO 
ORDER BY VS.VENDA_ANO DESC;







